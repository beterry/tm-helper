{"version":3,"sources":["constants.js","icons/add_circle.svg","icons/remove_circle.svg","components/TerraformRating.js","components/Cube.js","icons/add-icon.svg","components/SupplyCard.js","icons/chevron_right.svg","icons/chevron_left.svg","components/ProductionStepper.js","icons/mc-icon.svg","icons/steel-icon.svg","icons/titanium-icon.svg","icons/plants-icon.svg","icons/energy-icon.svg","icons/heat-icon.svg","icons/tile_forest.svg","icons/tile_temp.svg","icons/tile_ocean.svg","App.js","index.js"],"names":["COLORS","background","mainBlue","error","cardBK","bronze","silver","gold","primary","main","mc","bk","text","steel","titanium","plants","energy","heat","Wrapper","styled","div","Title","h1","Rating","h2","RatingWrapper","IncrementButton","button","Icon","img","TerraformRating","tr","increment","onClick","src","minusIcon","alt","addIcon","CubeWrapper","props","color","touched","Cube","step","touch","isTouched","id","e","preventDefault","handleTouch","Header","Supply","h3","AfterIncrement","p","IconButton","AddButton","AddIcon","IncrementForm","form","IncrementInput","input","SubmitButton","CancelButton","SupplyCard","title","supply","icon","showProduction","production","conversion","useState","incrementBy","setIncrementBy","showForm","setShowForm","cubes","setCubes","handleCubeTouch","i","touchedCube","newCubes","splice","resetCubes","forEach","cube","useEffect","Math","floor","buildCubes","push","map","type","value","onChange","parseInt","target","submitIncrement","handleTapCancel","handleTapAdd","IconWrapper","ProductionButton","active","PageButton","ProductionStepper","min","minRange","setMinRange","maxRange","setMaxRange","currentRange","disabled","arrowLeft","n","arrowRight","MainWrapper","MaxWidthWrapper","TerraformRatingWrapper","TileWrapper","TileButton","MainGrid","RightWrapper","LogWrapper","Action","SupplyWrapper","SupplyGrid","Heading","ProductionWrapper","ProduceWrapper","ProduceButton","CancelProduceButton","SectionSpacer","size","App","setTR","incrementTR","amount","addToLog","mcAvailable","setMcAvailable","mcProd","setMcProd","steelAvailable","setSteelAvailable","steelProd","setSteelProd","titaniumAvailable","setTitaniumAvailable","titaniumProd","setTitaniumProd","plantsAvailable","setPlantsAvailable","plantProd","setPlantProd","energyAvailable","setEnergyAvailable","energyProd","setEnergyProd","heatAvailable","setHeatAvailable","heatProd","setHeatProd","showProductionChoice","setShowProductionChoice","log","setLog","toggleProductionChoice","action","prevLog","slice","className","forestTile","tempTile","oceanTile","mcIcon","steelIcon","titaniumIcon","plantsIcon","energyIcon","heatIcon","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c7ec662.chunk.js","sourcesContent":["const COLORS = {\r\n    background: '#082032',\r\n    mainBlue: 'hsl(215, 100%, 68%)',\r\n    error: 'hsl(10, 100%, 58%)',\r\n    cardBK: 'hsl(215, 26%, 23%, .9)',\r\n    bronze: '#BC630F',\r\n    silver: '#A5A5A5',\r\n    gold: '#FFB80E',\r\n    primary: {\r\n        main: '#C24914',\r\n    },\r\n    mc: {\r\n        bk: '#FFE600',\r\n        text: '#F29102'\r\n    },\r\n    steel: {\r\n        bk: '#976138',\r\n        text: '#523B28',\r\n    },\r\n    titanium: {\r\n        bk: '#000000',\r\n        text: '#FFE600',\r\n    },\r\n    plants: {\r\n        bk: '#6CB526',\r\n        text: '#19592F',\r\n    },\r\n    energy: {\r\n        bk: '#94308B',\r\n        text: '#FFFFFF',\r\n    },\r\n    heat: {\r\n        bk: '#EA4929',\r\n        text: '#FFE600',\r\n    },\r\n}\r\n\r\nexport {COLORS};","export default __webpack_public_path__ + \"static/media/add_circle.5f1314a1.svg\";","export default __webpack_public_path__ + \"static/media/remove_circle.33b527da.svg\";","import styled from 'styled-components';\r\n\r\n//import icons\r\nimport addIcon from '../icons/add_circle.svg';\r\nimport minusIcon from '../icons/remove_circle.svg';\r\n\r\nconst TerraformRating = ({tr, increment}) => {\r\n    return (\r\n        <Wrapper>\r\n            <Title>Terraform Rating</Title>\r\n            <RatingWrapper>\r\n                <IncrementButton\r\n                    onClick={() => increment(-1)}\r\n                >\r\n                    <Icon src={minusIcon} alt=\"\"/>\r\n                </IncrementButton>\r\n\r\n                <Rating>{tr}</Rating>\r\n\r\n                <IncrementButton\r\n                    onClick={() => increment(1)}\r\n                >\r\n                    <Icon src={addIcon} alt=\"\"/>\r\n                </IncrementButton>\r\n            </RatingWrapper>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    @media screen and (min-width: 600px){\r\n        align-items: flex-start;\r\n    }\r\n`;\r\n\r\nconst Title = styled.h1`\r\n    margin-bottom: 8px;\r\n`;\r\n\r\nconst Rating = styled.h2`\r\n    font-size: 4rem;\r\n    margin: 0 16px;\r\n`;\r\n\r\nconst RatingWrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nconst IncrementButton = styled.button`\r\n    background-color: transparent;\r\n    width: 40px;\r\n    height: 40px;\r\n    border-radius: 50%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border: none;`;\r\n\r\nconst Icon = styled.img``;\r\n\r\nexport default TerraformRating;","import styled from 'styled-components';\r\nimport { COLORS } from '../constants';\r\n\r\nconst Cube = ({color, step, touch, isTouched, id}) => {\r\n    const handleTouch = (e) => {\r\n        e.preventDefault();\r\n        touch(id, isTouched ? -step : step);\r\n    }\r\n\r\n    return (\r\n        <CubeWrapper \r\n            color={color} \r\n            onClick={(e) => handleTouch(e)}\r\n            touched={isTouched}\r\n        />\r\n    )\r\n}\r\n\r\nconst CubeWrapper = styled.button`\r\n    width: 40px;\r\n    height: 40px;\r\n    background-color: ${props => COLORS[props.color]};\r\n    border-radius: 4px;\r\n    border: none;\r\n    opacity: ${props => props.touched ? .3 : 1};\r\n`;\r\n\r\nexport default Cube;","export default __webpack_public_path__ + \"static/media/add-icon.69df7126.svg\";","import {useState, useEffect} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport {COLORS} from '../constants';\r\n\r\nimport Cube from './Cube';\r\n\r\nimport addIcon from '../icons/add-icon.svg';\r\n\r\nconst SupplyCard = ({\r\n    title,\r\n    supply,\r\n    increment,\r\n    icon,\r\n    showProduction,\r\n    production,\r\n    conversion = {},\r\n}) => {\r\n    const [incrementBy, setIncrementBy] = useState(0);\r\n    const [showForm, setShowForm] = useState(false);\r\n    const [cubes, setCubes] = useState([]);\r\n\r\n    const submitIncrement = (e) => {\r\n        e.preventDefault();\r\n        increment(supply + incrementBy < 0 ? supply * -1 : incrementBy);\r\n        setIncrementBy(0);\r\n        setShowForm(false);\r\n    }\r\n\r\n    const handleTapAdd = (e) => {\r\n        e.preventDefault();\r\n\r\n        resetCubes();\r\n\r\n        if (incrementBy >= 0){\r\n            //if we are in the process of adding\r\n            setIncrementBy(incrementBy + 1);\r\n        }else {\r\n            //if we are transitioning from subtracting to adding\r\n            setIncrementBy(1);\r\n        }\r\n\r\n        setShowForm(true);\r\n    }\r\n\r\n    const handleTapCancel = (e) => {\r\n        e.preventDefault();\r\n\r\n        resetCubes();\r\n\r\n        setIncrementBy(0);\r\n        setShowForm(false);\r\n    }\r\n\r\n    const handleCubeTouch = (i, step) => {\r\n        \r\n        let touchedCube = cubes[i];\r\n        let newCubes = [...cubes];\r\n\r\n        //toggle the opacity of the touched cube\r\n        touchedCube.isTouched = !touchedCube.isTouched;\r\n        //replace existing cube with the new one\r\n        newCubes.splice(i, 1, touchedCube);\r\n\r\n        if (incrementBy > 0){\r\n            //if we are transitioning from adding to subtracting\r\n            setIncrementBy(- step);\r\n        } else {\r\n            //if we are in process of subtracting\r\n            setIncrementBy(incrementBy - step);\r\n        }\r\n        \r\n        setCubes(newCubes);\r\n        setShowForm(true);\r\n    }\r\n\r\n    const resetCubes = () => {\r\n        let newCubes = [...cubes];\r\n        newCubes.forEach(cube => {\r\n            cube.isTouched = false;\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        let bronze = supply;\r\n        let silver = 0;\r\n        let gold = 0;\r\n\r\n        if (supply >= 10){\r\n            silver = 1;\r\n            bronze = supply - 5;\r\n        }\r\n\r\n        if (supply >= 15){\r\n            silver = 2;\r\n            bronze = supply - 10;\r\n        }\r\n\r\n        if (supply > 20){\r\n            silver = 2;\r\n            bronze = supply - 10;\r\n        }\r\n\r\n        if (supply > 25){\r\n            gold = 1;\r\n            silver = 2;\r\n            bronze = supply - 20;\r\n        }\r\n\r\n        if (supply > 30){\r\n            gold = Math.floor((supply - 15) / 10)\r\n            silver = 2;\r\n            bronze = supply - (gold * 10) - 10;\r\n        }\r\n\r\n        //build cubes\r\n        let buildCubes = [];\r\n        for (let i = 0; i < bronze; i++){\r\n            buildCubes.push({step: 1, color: 'bronze', isTouched: false});\r\n        };\r\n\r\n        for (let i = 0; i < silver; i++){\r\n            buildCubes.push({step: 5, color: 'silver', isTouched: false});\r\n        };\r\n\r\n        for (let i = 0; i < gold; i++){\r\n            buildCubes.push({step: 10, color: 'gold', isTouched: false});\r\n        };\r\n\r\n        setCubes(buildCubes);\r\n    }, [supply])\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Title>{title}</Title>\r\n            <Header>\r\n                <Icon src={icon} alt=''/>\r\n                <Supply>{supply}</Supply>\r\n                {(showForm && !showProduction) &&\r\n                    <AfterIncrement>{supply + incrementBy}</AfterIncrement>\r\n                }\r\n                {(showProduction && production !== 0) &&\r\n                    <AfterIncrement>{production > 0 && \"+\"}{production}</AfterIncrement>\r\n                }\r\n            </Header>\r\n            {supply > 0 && \r\n                <CubeWrapper>\r\n                    {cubes.map((cube, i) => \r\n                        <Cube \r\n                            id={i}\r\n                            key={i}\r\n                            step={cube.step}\r\n                            color={cube.color}\r\n                            touch={handleCubeTouch}\r\n                            isTouched={cube.isTouched}\r\n                        />\r\n                    )}\r\n                </CubeWrapper>\r\n            }\r\n            {showForm &&\r\n                <IncrementForm>\r\n                    <IncrementInput\r\n                        type='number'\r\n                        value={incrementBy}\r\n                        onChange={(e) => setIncrementBy(parseInt(e.target.value))}\r\n                    />\r\n                    <SubmitButton\r\n                        onClick={(e) => submitIncrement(e)}\r\n                    >\r\n                        {incrementBy >=0 ? 'Add' : 'Spend'}\r\n                    </SubmitButton>\r\n                    <CancelButton\r\n                        onClick={(e) => handleTapCancel(e)}\r\n                    >\r\n                        Cancel\r\n                    </CancelButton>\r\n                </IncrementForm>\r\n            }\r\n            <AddButton\r\n                onClick={(e) => handleTapAdd(e)}\r\n            >\r\n                <AddIcon src={addIcon} alt='Add'/>\r\n            </AddButton>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n    background-color: ${COLORS.cardBK};\r\n    border-radius: 8px;\r\n    padding: 16px;\r\n    padding-bottom: 32px;\r\n    position: relative;\r\n    min-height: 200px;\r\n`;\r\n\r\nconst Title = styled.h2`\r\n    font-size: .875rem;\r\n    text-transform: uppercase;\r\n    letter-spacing: .7px;\r\n    font-weight: 400;\r\n    margin-bottom: 8px;\r\n`;\r\n\r\nconst Header = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nconst Supply = styled.h3`\r\n    font-size: 2rem;\r\n    font-weight: 700;\r\n    margin-right: 8px;\r\n`;\r\n\r\nconst AfterIncrement = styled.p`\r\n    font-size: 1rem;\r\n    opacity: .5;\r\n\r\n`;\r\n\r\nconst Icon = styled.img`\r\n    margin-right: 8px;\r\n`;\r\n\r\nconst IconButton = styled.button`\r\n    background-color: transparent;\r\n    border-radius: 50%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border: none;\r\n`;\r\n\r\nconst AddButton = styled(IconButton)`\r\n    position: absolute;\r\n    top: 16px;\r\n    right: 16px;\r\n    width: 40px;\r\n    height: 40px;\r\n`;\r\n\r\nconst AddIcon = styled.img``;\r\n\r\nconst IncrementForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr;\r\n    gap: 4px;\r\n    align-content: end;\r\n    position: absolute;\r\n    bottom: 16px;\r\n    right: 16px;\r\n    left: 16px;\r\n`;\r\n\r\nconst IncrementInput = styled.input`\r\n    display: block;\r\n    width: 100%;\r\n    background-color: transparent;\r\n    padding: 4px 8px;\r\n    border: none;\r\n    border-bottom: 2px solid ${COLORS.mainBlue};\r\n    color: white;\r\n    flex: 1;\r\n    font-size: 1.25rem;\r\n`;\r\n\r\nconst IncrementButton = styled.button`\r\n    background-color: transparent;\r\n    border: none;\r\n    padding: 4px 16px;\r\n    text-transform: uppercase;\r\n    letter-spacing: .7px;\r\n`;\r\n\r\nconst SubmitButton = styled(IncrementButton)`\r\n    color: ${COLORS.mainBlue};\r\n`;\r\n\r\nconst CancelButton = styled(IncrementButton)`\r\n    color: ${COLORS.error};\r\n`;\r\n\r\nconst CubeWrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, 40px);\r\n    gap: 8px;\r\n    margin-top: 16px;\r\n`;\r\n\r\nexport default SupplyCard;","export default __webpack_public_path__ + \"static/media/chevron_right.68dead55.svg\";","export default __webpack_public_path__ + \"static/media/chevron_left.6fa6bae4.svg\";","import {useState} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport {COLORS} from '../constants';\r\n\r\nimport arrowRight from '../icons/chevron_right.svg';\r\nimport arrowLeft from '../icons/chevron_left.svg';\r\n\r\nconst ProductionStepper = ({icon, increment, production, min}) => {\r\n    const [minRange, setMinRange] = useState(0);\r\n    const [maxRange, setMaxRange] = useState(5);\r\n\r\n\r\n    const pageUp = () => {\r\n        setMinRange(minRange + 5);\r\n        setMaxRange(maxRange + 5);\r\n    }\r\n\r\n    const pageDown = () => {\r\n        setMinRange(minRange - 5);\r\n        setMaxRange(maxRange - 5);\r\n    }\r\n\r\n    let currentRange = [];\r\n    for (let i = minRange; i < maxRange; i++){\r\n        currentRange.push(i);\r\n    }\r\n\r\n    return (\r\n        <Wrapper>\r\n            <IconWrapper><Icon src={icon} alt=\"\"/></IconWrapper>\r\n            <PageButton\r\n                onClick={() => pageDown()}\r\n                disabled={minRange <= min}\r\n            >\r\n                <Icon src={arrowLeft} alt=\"\" />\r\n            </PageButton>\r\n            {currentRange.map((n, i) => \r\n                <ProductionButton\r\n                    key={i}\r\n                    active={n === production}\r\n                    onClick={() => increment(n)}\r\n                    disabled={n < min}\r\n                >\r\n                    {n}\r\n                </ProductionButton>\r\n            )}\r\n            <PageButton\r\n                onClick={() => pageUp()}\r\n            >\r\n                <Icon src={arrowRight} alt=\"\" />\r\n            </PageButton>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    border-radius: 8px;\r\n    padding: 8px;\r\n\r\n    &:nth-child(odd){\r\n        background-color: ${COLORS.cardBK};\r\n    }\r\n`;\r\n\r\nconst IconWrapper = styled.div`\r\n    line-height: 1;\r\n`;\r\n\r\nconst Icon = styled.img`\r\n    display: block;\r\n`;\r\n\r\nconst ProductionButton = styled.button`\r\n    width: 40px;\r\n    height: 40px;\r\n    border-radius: 50%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background-color: ${props => props.active ? COLORS.mainBlue : 'transparent'};\r\n    border: none;\r\n    color: white;\r\n\r\n    &:disabled{\r\n        opacity: .3;\r\n    }\r\n`;\r\n\r\nconst PageButton = styled(ProductionButton)``;\r\n\r\nexport default ProductionStepper;","export default __webpack_public_path__ + \"static/media/mc-icon.47f5d90a.svg\";","export default __webpack_public_path__ + \"static/media/steel-icon.4a99db51.svg\";","export default __webpack_public_path__ + \"static/media/titanium-icon.01fe0eb8.svg\";","export default __webpack_public_path__ + \"static/media/plants-icon.75eb78bf.svg\";","export default __webpack_public_path__ + \"static/media/energy-icon.ebfd52c8.svg\";","export default __webpack_public_path__ + \"static/media/heat-icon.6e3ea992.svg\";","export default __webpack_public_path__ + \"static/media/tile_forest.42ffb5d8.svg\";","export default __webpack_public_path__ + \"static/media/tile_temp.26e0ad57.svg\";","export default __webpack_public_path__ + \"static/media/tile_ocean.75737004.svg\";","import { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\n//import constants\r\nimport {COLORS} from './constants';\r\n\r\n//import components\r\nimport TerraformRating from './components/TerraformRating';\r\nimport SupplyCard from './components/SupplyCard';\r\nimport ProductionStepper from './components/ProductionStepper';\r\n\r\n//import icons\r\nimport mcIcon from './icons/mc-icon.svg';\r\nimport steelIcon from './icons/steel-icon.svg';\r\nimport titaniumIcon from './icons/titanium-icon.svg';\r\nimport plantsIcon from './icons/plants-icon.svg';\r\nimport energyIcon from './icons/energy-icon.svg';\r\nimport heatIcon from './icons/heat-icon.svg';\r\nimport forestTile from './icons/tile_forest.svg';\r\nimport tempTile from './icons/tile_temp.svg';\r\nimport oceanTile from './icons/tile_ocean.svg';\r\n\r\nfunction App() {\r\n\r\n    //================ TR ================\r\n    const [tr, setTR] = useState(20);\r\n\r\n    const incrementTR = (amount) => {\r\n        setTR(tr + amount);\r\n        addToLog('TR ' + (amount<0?\"\":\"+\") + amount);\r\n    }\r\n\r\n    //================ MC ================\r\n    const [mcAvailable, setMcAvailable] = useState(0);\r\n    const [mcProd, setMcProd] = useState(0);\r\n\r\n    \r\n    const incrementMC = (amount) => {\r\n        setMcAvailable(mcAvailable + amount);\r\n        addToLog('MegaCredits ' + (amount<0?\"\":\"+\") + amount);\r\n    }\r\n    \r\n    const incrementMcProd = (amount) => {\r\n        setMcProd(amount);\r\n        addToLog('MegaCredit production: ' + amount);\r\n    }\r\n\r\n    //================ STEEL ================\r\n    const [steelAvailable, setSteelAvailable] = useState(0);\r\n    const [steelProd, setSteelProd] = useState(0);\r\n\r\n    \r\n    const incrementSteel = (amount) => {\r\n        setSteelAvailable(steelAvailable + amount);\r\n        addToLog('Steel ' + (amount<0?\"\":\"+\") + amount);\r\n    }\r\n    \r\n    const incrementSteelProd = (amount) => {\r\n        setSteelProd(amount);\r\n        addToLog('Steel production: ' + amount);\r\n    }\r\n\r\n    //================ TITANIUM ================\r\n    const [titaniumAvailable, setTitaniumAvailable] = useState(0);\r\n    const [titaniumProd, setTitaniumProd] = useState(0);\r\n\r\n    \r\n    const incrementTitanium = (amount) => {\r\n        setTitaniumAvailable(titaniumAvailable + amount);\r\n        addToLog('Titanium ' + (amount<0?\"\":\"+\") + amount);\r\n    }\r\n    \r\n    const incrementTitaniumProd = (amount) => {\r\n        setTitaniumProd(amount);\r\n        addToLog('Titanium production: ' + amount);\r\n    }\r\n\r\n    //================ PLANTS ================\r\n    const [plantsAvailable, setPlantsAvailable] = useState(0);\r\n    const [plantProd, setPlantProd] = useState(0);\r\n\r\n    \r\n    const incrementPlants = (amount) => {\r\n        setPlantsAvailable(plantsAvailable + amount);\r\n        addToLog('Plants ' + (amount<0?\"\":\"+\") + amount);\r\n    }\r\n    \r\n    const incrementPlantProd = (amount) => {\r\n        setPlantProd(amount);\r\n        addToLog('Plant production: ' + amount);\r\n    }\r\n\r\n    //================ ENERGY ================\r\n    const [energyAvailable, setEnergyAvailable] = useState(0);\r\n    const [energyProd, setEnergyProd] = useState(0);\r\n\r\n    \r\n    const incrementEnergy = (amount) => {\r\n        setEnergyAvailable(energyAvailable + amount);\r\n        addToLog('Energy ' + (amount<0?\"\":\"+\") + amount);\r\n    }\r\n    \r\n    const incrementEnergyProd = (amount) => {\r\n        setEnergyProd(amount);\r\n        addToLog('Energy production: ' + amount);\r\n    }\r\n\r\n    //================ HEAT ================\r\n    const [heatAvailable, setHeatAvailable] = useState(0);\r\n    const [heatProd, setHeatProd] = useState(0);\r\n\r\n    \r\n    const incrementHeat = (amount) => {\r\n        setHeatAvailable(heatAvailable + amount);\r\n        addToLog('Heat ' + (amount<0?\"\":\"+\") + amount);\r\n    }\r\n    \r\n    const incrementHeatProd = (amount) => {\r\n        setHeatProd(amount);\r\n        addToLog('Heat production: ' + amount);\r\n    }\r\n    \r\n    //================ ACTIONS ================\r\n    const produce = () => {\r\n        //ME\r\n        setMcAvailable(mcAvailable + mcProd + tr);\r\n\r\n        //Steel\r\n        setSteelAvailable(steelAvailable + steelProd);\r\n\r\n        //Titanium\r\n        setTitaniumAvailable(titaniumAvailable + titaniumProd);\r\n\r\n        //Plants\r\n        setPlantsAvailable(plantsAvailable + plantProd);\r\n\r\n        //Heat\r\n        //heat must be produced before energy because leftover energy is added to heatAvailable\r\n        setHeatAvailable(heatAvailable + heatProd + energyAvailable);\r\n\r\n        //Energy\r\n        //leftover energy is converted to heat, do not add energyAvailable here\r\n        setEnergyAvailable(energyProd);\r\n\r\n        toggleProductionChoice();\r\n        addToLog('Production Phase');\r\n    }\r\n\r\n    //================ MISC STATE ================\r\n    const [showProductionChoice, setShowProductionChoice] = useState(false);\r\n    const [log, setLog] = useState([]);\r\n\r\n    const toggleProductionChoice = () => {\r\n        setShowProductionChoice(!showProductionChoice);\r\n    }\r\n\r\n    const addToLog = (action) => {\r\n        setLog(prevLog => [action, ...prevLog.slice(0, 24)]);\r\n    }\r\n\r\n    //=============================================\r\n    // RENDER\r\n    //=============================================\r\n\r\n    return (\r\n        <MainWrapper className=\"App\">\r\n            <MaxWidthWrapper>\r\n                <TerraformRatingWrapper>\r\n                    <TerraformRating\r\n                        tr={tr}\r\n                        increment={incrementTR}\r\n                    />\r\n                    <TileWrapper>\r\n                        <TileButton\r\n                            onClick={() => incrementTR(1)}\r\n                        >\r\n                            <img src={forestTile} alt=\"\"/>\r\n                        </TileButton>\r\n                        <TileButton\r\n                            onClick={() => incrementTR(1)}\r\n                        >\r\n                            <img src={tempTile} alt=\"\"/>\r\n                        </TileButton>\r\n                        <TileButton\r\n                            onClick={() => incrementTR(1)}\r\n                        >\r\n                            <img src={oceanTile} alt=\"\"/>\r\n                        </TileButton>\r\n                    </TileWrapper>\r\n                </TerraformRatingWrapper>\r\n                <MainGrid>\r\n                    <SupplyWrapper>\r\n                        <Heading>Supply</Heading>\r\n                        <SupplyGrid>\r\n                            <SupplyCard \r\n                                title='Mega Credits'\r\n                                supply={mcAvailable}\r\n                                icon={mcIcon}\r\n                                increment={incrementMC}\r\n                                showProduction={showProductionChoice}\r\n                                production={mcProd + tr}\r\n                            />\r\n                            <SupplyCard \r\n                                title='Steel'\r\n                                supply={steelAvailable}\r\n                                icon={steelIcon}\r\n                                increment={incrementSteel}\r\n                                showProduction={showProductionChoice}\r\n                                production={steelProd}\r\n                            />\r\n                            <SupplyCard \r\n                                title='Titanium'\r\n                                supply={titaniumAvailable}\r\n                                icon={titaniumIcon}\r\n                                increment={incrementTitanium}\r\n                                showProduction={showProductionChoice}\r\n                                production={titaniumProd}\r\n                            />\r\n                            <SupplyCard \r\n                                title='Plants'\r\n                                supply={plantsAvailable}\r\n                                icon={plantsIcon}\r\n                                increment={incrementPlants}\r\n                                showProduction={showProductionChoice}\r\n                                production={plantProd}\r\n                            />\r\n                            <SupplyCard \r\n                                title='Energy'\r\n                                supply={energyAvailable}\r\n                                icon={energyIcon}\r\n                                increment={incrementEnergy}\r\n                                showProduction={showProductionChoice}\r\n                                production={energyProd - energyAvailable}\r\n                            />\r\n                            <SupplyCard \r\n                                title='Heat'\r\n                                supply={heatAvailable}\r\n                                icon={heatIcon}\r\n                                increment={incrementHeat}\r\n                                showProduction={showProductionChoice}\r\n                                production={heatProd + energyAvailable}\r\n                            />\r\n                        </SupplyGrid>\r\n                    </SupplyWrapper>\r\n                    <RightWrapper>\r\n                        <Heading>Production</Heading>\r\n                        <SectionSpacer size='16px'/>\r\n                        <ProductionWrapper>\r\n                            <ProductionStepper\r\n                                icon={mcIcon}\r\n                                min={-5}\r\n                                production={mcProd}\r\n                                increment={incrementMcProd}\r\n                            />\r\n                            <ProductionStepper\r\n                                icon={steelIcon}\r\n                                min={0}\r\n                                production={steelProd}\r\n                                increment={incrementSteelProd}\r\n                            />\r\n                            <ProductionStepper\r\n                                icon={titaniumIcon}\r\n                                min={0}\r\n                                production={titaniumProd}\r\n                                increment={incrementTitaniumProd}\r\n                            />\r\n                            <ProductionStepper\r\n                                icon={plantsIcon}\r\n                                min={0}\r\n                                production={plantProd}\r\n                                increment={incrementPlantProd}\r\n                            />\r\n                            <ProductionStepper\r\n                                icon={energyIcon}\r\n                                min={0}\r\n                                production={energyProd}\r\n                                increment={incrementEnergyProd}\r\n                            />\r\n                            <ProductionStepper\r\n                                icon={heatIcon}\r\n                                min={0}\r\n                                production={heatProd}\r\n                                increment={incrementHeatProd}\r\n                            />\r\n                        </ProductionWrapper>\r\n                        <SectionSpacer size='32px'/>\r\n                        <Heading>Log</Heading>\r\n                        <SectionSpacer size='16px'/>\r\n                        <LogWrapper>\r\n                            {log.map((action, i) => <Action key={i}>{action}</Action>)}\r\n                        </LogWrapper>\r\n                    </RightWrapper>\r\n                </MainGrid>\r\n            </MaxWidthWrapper>\r\n            <ProduceWrapper>\r\n                {\r\n                    showProductionChoice ?\r\n                    <>\r\n                        <ProduceButton onClick={() => produce()}>Produce</ProduceButton>\r\n                        <CancelProduceButton onClick={() => toggleProductionChoice()}>Cancel</CancelProduceButton>\r\n                    </>\r\n                    :\r\n                    <ProduceButton onClick={() => toggleProductionChoice()}>Produce</ProduceButton>\r\n                }\r\n            </ProduceWrapper>\r\n        </MainWrapper>\r\n    );\r\n}\r\n\r\nconst MainWrapper = styled.main`\r\n    min-height: 100%;\r\n    padding: 32px 16px;\r\n    background-color: ${COLORS.background};\r\n    position: relative;\r\n    \r\n    @media screen and (min-width: 600px){\r\n        padding: 32px;\r\n    }\r\n`;\r\n\r\nconst MaxWidthWrapper = styled.div`\r\n    height: 100%;\r\n    max-width: 1400px;\r\n    margin: 0 auto;\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: auto 1fr;\r\n    gap: 32px;\r\n`;\r\n\r\nconst TerraformRatingWrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    gap: 32px;\r\n\r\n    @media screen and (min-width: 600px){\r\n        grid-template-columns: 1fr 1fr;\r\n    }\r\n`;\r\n\r\nconst TileWrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    @media screen and (min-width: 600px){\r\n        justify-content: flex-end;\r\n    }\r\n`;\r\n\r\nconst TileButton = styled.button`\r\n    width: 70px;\r\n    height: 70px;\r\n    background-color: transparent;\r\n    border: none;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-radius: 50%;\r\n`;\r\n\r\nconst MainGrid = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    gap: 32px;\r\n\r\n    @media screen and (min-width: 786px){\r\n        grid-template-columns: 5fr 2fr;\r\n    }\r\n`;\r\n\r\nconst RightWrapper = styled.div`\r\n    \r\n`;\r\n\r\nconst LogWrapper = styled.div`\r\n    height: 200px;\r\n    overflow-y: auto;\r\n`;\r\n\r\nconst Action = styled.p`\r\n    margin-top: 8px;\r\n    opacity: .5;\r\n\r\n    &:first-of-type{\r\n        margin-top: 0;\r\n    }\r\n`;\r\n\r\nconst SupplyWrapper = styled.div`\r\n    display: grid;\r\n    grid-template-rows: auto 1fr;\r\n    gap: 16px;\r\n`;\r\n\r\nconst SupplyGrid = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n    gap: 16px;\r\n    overflow-y: auto;\r\n`;\r\n\r\nconst Heading = styled.h2`\r\n    \r\n`;\r\n\r\nconst ProductionWrapper = styled.div`\r\n    display: grid;\r\n    gap: 8px;\r\n`;\r\n\r\nconst ProduceWrapper = styled.div`\r\n    position: fixed;\r\n    bottom: 32px;\r\n    right: 32px;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    gap: 16px;\r\n`;\r\n\r\nconst ProduceButton = styled.button`\r\n    background-color: ${COLORS.mainBlue};\r\n    border: none;\r\n    min-height: 50px;\r\n    min-width: 150px;\r\n    border-radius: 25px;\r\n    display: inline-flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: white;\r\n    font-weight: 500;\r\n    text-transform: uppercase;\r\n    letter-spacing: .7px;\r\n`;\r\n\r\nconst CancelProduceButton = styled(ProduceButton)`\r\n    background-color: transparent;\r\n    color: ${COLORS.error};\r\n    border: 1px solid ${COLORS.error};\r\n`;\r\n\r\nconst SectionSpacer = styled.div`\r\n    height: ${props => props.size};\r\n`;\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}