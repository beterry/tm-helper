{"version":3,"sources":["constants.js","icons/add_circle.svg","icons/remove_circle.svg","components/TerraformRating.js","components/Cube.js","icons/add-icon.svg","components/SupplyCard.js","icons/chevron_right.svg","icons/chevron_left.svg","components/ProductionStepper.js","icons/mc-icon.svg","icons/steel-icon.svg","icons/titanium-icon.svg","icons/plants-icon.svg","icons/energy-icon.svg","icons/heat-icon.svg","icons/tile_forest.svg","icons/tile_temp.svg","icons/tile_ocean.svg","App.js","index.js"],"names":["COLORS","background","mainBlue","error","cardBK","bronze","silver","gold","primary","main","mc","bk","text","steel","titanium","plants","energy","heat","Wrapper","styled","div","Title","h1","Rating","h2","RatingWrapper","IncrementButton","button","Icon","img","TerraformRating","tr","increment","onClick","src","minusIcon","alt","addIcon","CubeWrapper","props","color","touched","Cube","step","action","useState","isTouched","setIsTouched","e","preventDefault","handleTouch","Header","Supply","h3","AfterIncrement","p","IconButton","AddButton","AddIcon","IncrementForm","form","IncrementInput","input","SubmitButton","CancelButton","FlexFill","SupplyCard","title","supply","icon","showProduction","production","incrementBy","setIncrementBy","showForm","setShowForm","forceReset","setForceReset","handleCubeTouch","resetCubes","Math","floor","bronzeCubes","i","push","silverCubes","goldCubes","type","value","onChange","parseInt","target","submitIncrement","handleTapCancel","handleTapAdd","IconWrapper","ProductionButton","active","PageButton","ProductionStepper","min","minRange","setMinRange","maxRange","setMaxRange","currentRange","disabled","arrowLeft","map","n","arrowRight","MainWrapper","MaxWidthWrapper","TerraformRatingWrapper","TileWrapper","TileButton","MainGrid","RightWrapper","LogWrapper","Action","SupplyWrapper","SupplyGrid","Heading","ProductionWrapper","ProduceWrapper","ProduceButton","CancelProduceButton","SectionSpacer","size","App","setTR","incrementTR","amount","addToLog","mcAvailable","setMcAvailable","mcProd","setMcProd","steelAvailable","setSteelAvailable","steelProd","setSteelProd","titaniumAvailable","setTitaniumAvailable","titaniumProd","setTitaniumProd","plantsAvailable","setPlantsAvailable","plantProd","setPlantProd","energyAvailable","setEnergyAvailable","energyProd","setEnergyProd","heatAvailable","setHeatAvailable","heatProd","setHeatProd","showProductionChoice","setShowProductionChoice","log","setLog","toggleProductionChoice","prevLog","slice","className","forestTile","tempTile","oceanTile","mcIcon","steelIcon","titaniumIcon","plantsIcon","energyIcon","heatIcon","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.626aa629.chunk.js","sourcesContent":["const COLORS = {\r\n    background: '#082032',\r\n    mainBlue: 'hsl(215, 100%, 68%)',\r\n    error: 'hsl(10, 100%, 58%)',\r\n    cardBK: 'hsl(215, 26%, 23%, .9)',\r\n    bronze: '#BC630F',\r\n    silver: '#A5A5A5',\r\n    gold: '#FFB80E',\r\n    primary: {\r\n        main: '#C24914',\r\n    },\r\n    mc: {\r\n        bk: '#FFE600',\r\n        text: '#F29102'\r\n    },\r\n    steel: {\r\n        bk: '#976138',\r\n        text: '#523B28',\r\n    },\r\n    titanium: {\r\n        bk: '#000000',\r\n        text: '#FFE600',\r\n    },\r\n    plants: {\r\n        bk: '#6CB526',\r\n        text: '#19592F',\r\n    },\r\n    energy: {\r\n        bk: '#94308B',\r\n        text: '#FFFFFF',\r\n    },\r\n    heat: {\r\n        bk: '#EA4929',\r\n        text: '#FFE600',\r\n    },\r\n}\r\n\r\nexport {COLORS};","export default __webpack_public_path__ + \"static/media/add_circle.5f1314a1.svg\";","export default __webpack_public_path__ + \"static/media/remove_circle.33b527da.svg\";","import styled from 'styled-components';\r\n\r\n//import icons\r\nimport addIcon from '../icons/add_circle.svg';\r\nimport minusIcon from '../icons/remove_circle.svg';\r\n\r\nconst TerraformRating = ({tr, increment}) => {\r\n    return (\r\n        <Wrapper>\r\n            <Title>Terraform Rating</Title>\r\n            <RatingWrapper>\r\n                <IncrementButton\r\n                    onClick={() => increment(-1)}\r\n                >\r\n                    <Icon src={minusIcon} alt=\"\"/>\r\n                </IncrementButton>\r\n\r\n                <Rating>{tr}</Rating>\r\n\r\n                <IncrementButton\r\n                    onClick={() => increment(1)}\r\n                >\r\n                    <Icon src={addIcon} alt=\"\"/>\r\n                </IncrementButton>\r\n            </RatingWrapper>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    @media screen and (min-width: 600px){\r\n        align-items: flex-start;\r\n    }\r\n`;\r\n\r\nconst Title = styled.h1`\r\n    margin-bottom: 8px;\r\n`;\r\n\r\nconst Rating = styled.h2`\r\n    font-size: 4rem;\r\n    margin: 0 16px;\r\n`;\r\n\r\nconst RatingWrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nconst IncrementButton = styled.button`\r\n    background-color: transparent;\r\n    width: 40px;\r\n    height: 40px;\r\n    border-radius: 50%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border: none;`;\r\n\r\nconst Icon = styled.img``;\r\n\r\nexport default TerraformRating;","import {useState} from 'react';\r\nimport styled from 'styled-components';\r\nimport { COLORS } from '../constants';\r\n\r\nconst Cube = ({color, step, action}) => {\r\n    const [isTouched, setIsTouched] = useState(false);\r\n\r\n    const handleTouch = (e) => {\r\n        e.preventDefault();\r\n\r\n        //activate action\r\n        action(isTouched ? step : -step);\r\n\r\n        //toggle opacity\r\n        setIsTouched(!isTouched);\r\n    }\r\n\r\n    return (\r\n        <CubeWrapper \r\n            color={color} \r\n            onClick={(e) => handleTouch(e)}\r\n            touched={isTouched}\r\n        />\r\n    )\r\n}\r\n\r\nconst CubeWrapper = styled.button`\r\n    width: 40px;\r\n    height: 40px;\r\n    background-color: ${props => COLORS[props.color]};\r\n    border-radius: 4px;\r\n    border: none;\r\n    opacity: ${props => props.touched ? .3 : 1};\r\n`;\r\n\r\nexport default Cube;","export default __webpack_public_path__ + \"static/media/add-icon.69df7126.svg\";","import {useState} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport {COLORS} from '../constants';\r\n\r\nimport Cube from './Cube';\r\n\r\nimport addIcon from '../icons/add-icon.svg';\r\n\r\nconst SupplyCard = ({\r\n    title,\r\n    supply,\r\n    increment,\r\n    icon,\r\n    showProduction,\r\n    production,\r\n}) => {\r\n    const [incrementBy, setIncrementBy] = useState(0);\r\n    const [showForm, setShowForm] = useState(false);\r\n    const [forceReset, setForceReset] = useState(1);\r\n\r\n    const submitIncrement = (e) => {\r\n        e.preventDefault();\r\n        resetCubes();\r\n        increment(supply + incrementBy < 0 ? supply * -1 : incrementBy);\r\n        setIncrementBy(0);\r\n        setShowForm(false);\r\n    }\r\n\r\n    const handleTapAdd = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (incrementBy >= 0){\r\n            //if we are in the process of adding\r\n            setIncrementBy(incrementBy + 1);\r\n        }else {\r\n            //if we are transitioning from subtracting to adding\r\n            setIncrementBy(1);\r\n        }\r\n\r\n        setShowForm(true);\r\n        resetCubes();\r\n    }\r\n\r\n    const handleTapCancel = (e) => {\r\n        e.preventDefault();\r\n        setIncrementBy(0);\r\n        setShowForm(false);\r\n        resetCubes();\r\n    }\r\n\r\n    const handleCubeTouch = (step) => {\r\n        setIncrementBy(incrementBy + step);\r\n        setShowForm(true);\r\n    }\r\n    \r\n    const resetCubes = () => {\r\n        setForceReset(forceReset + 1);\r\n     }\r\n\r\n    let bronze = supply;\r\n    let silver = 0;\r\n    let gold = 0;\r\n\r\n    if (supply >= 10){\r\n        silver = 1;\r\n        bronze = supply - 5;\r\n    }\r\n\r\n    if (supply >= 15){\r\n        silver = 2;\r\n        bronze = supply - 10;\r\n    }\r\n\r\n    if (supply > 20){\r\n        silver = 2;\r\n        bronze = supply - 10;\r\n    }\r\n\r\n    if (supply > 25){\r\n        gold = 1;\r\n        silver = 2;\r\n        bronze = supply - 20;\r\n    }\r\n\r\n    if (supply > 30){\r\n        gold = Math.floor((supply - 15) / 10)\r\n        silver = 2;\r\n        bronze = supply - (gold * 10) - 10;\r\n    }\r\n\r\n    //build cubes\r\n    let bronzeCubes = [];\r\n    for (let i = 0; i < bronze; i++){\r\n        bronzeCubes.push(\r\n            <Cube\r\n                key={`bronze ${i} ${forceReset}`}\r\n                color='bronze'\r\n                step={1}\r\n                action={handleCubeTouch}\r\n            />\r\n        );\r\n    };\r\n\r\n    let silverCubes = [];\r\n    for (let i = 0; i < silver; i++){\r\n        silverCubes.push(\r\n            <Cube\r\n                key={`silver ${i} ${forceReset}`}\r\n                color='silver'\r\n                step={5}\r\n                action={handleCubeTouch}\r\n            />\r\n        );\r\n    };\r\n\r\n    let goldCubes = [];\r\n    for (let i = 0; i < gold; i++){\r\n        goldCubes.push(\r\n            <Cube\r\n                key={`gold ${i} ${forceReset}`}\r\n                color='gold'\r\n                step={10}\r\n                action={handleCubeTouch}\r\n            />\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Title>{title}</Title>\r\n            <Header>\r\n                <Icon src={icon} alt=''/>\r\n                <Supply>{supply}</Supply>\r\n                {(showForm && !showProduction) &&\r\n                    <AfterIncrement>{supply + incrementBy}</AfterIncrement>\r\n                }\r\n                {(showProduction && production !== 0) &&\r\n                    <AfterIncrement>{production > 0 && \"+\"}{production}</AfterIncrement>\r\n                }\r\n            </Header>\r\n            {supply > 0 && \r\n                <CubeWrapper>\r\n                    {bronzeCubes}\r\n                    {silverCubes}\r\n                    {goldCubes}\r\n                </CubeWrapper>\r\n            }\r\n            <FlexFill />\r\n            {showForm &&\r\n                <IncrementForm>\r\n                    <IncrementInput\r\n                        type='number'\r\n                        value={incrementBy}\r\n                        onChange={(e) => setIncrementBy(parseInt(e.target.value))}\r\n                    />\r\n                    <SubmitButton\r\n                        onClick={(e) => submitIncrement(e)}\r\n                    >\r\n                        {incrementBy >=0 ? 'Add' : 'Spend'}\r\n                    </SubmitButton>\r\n                    <CancelButton\r\n                        onClick={(e) => handleTapCancel(e)}\r\n                    >\r\n                        Cancel\r\n                    </CancelButton>\r\n                </IncrementForm>\r\n            }\r\n            <AddButton\r\n                onClick={(e) => handleTapAdd(e)}\r\n            >\r\n                <AddIcon src={addIcon} alt='Add'/>\r\n            </AddButton>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n    background-color: ${COLORS.cardBK};\r\n    border-radius: 8px;\r\n    padding: 16px;\r\n    position: relative;\r\n    min-height: 200px;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst Title = styled.h2`\r\n    font-size: .875rem;\r\n    text-transform: uppercase;\r\n    letter-spacing: .7px;\r\n    font-weight: 400;\r\n    margin-bottom: 8px;\r\n`;\r\n\r\nconst Header = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nconst Supply = styled.h3`\r\n    font-size: 2rem;\r\n    font-weight: 700;\r\n    margin-right: 8px;\r\n`;\r\n\r\nconst AfterIncrement = styled.p`\r\n    font-size: 1rem;\r\n    opacity: .5;\r\n\r\n`;\r\n\r\nconst Icon = styled.img`\r\n    margin-right: 8px;\r\n`;\r\n\r\nconst IconButton = styled.button`\r\n    background-color: transparent;\r\n    border-radius: 50%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border: none;\r\n`;\r\n\r\nconst AddButton = styled(IconButton)`\r\n    position: absolute;\r\n    top: 16px;\r\n    right: 16px;\r\n    width: 40px;\r\n    height: 40px;\r\n`;\r\n\r\nconst AddIcon = styled.img``;\r\n\r\nconst IncrementForm = styled.form`\r\n    width: 100%;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr;\r\n    gap: 16px;\r\n    align-content: end;\r\n    margin-top: 16px;\r\n`;\r\n\r\nconst IncrementInput = styled.input`\r\n    display: block;\r\n    width: 100%;\r\n    background-color: transparent;\r\n    padding: 4px 8px;\r\n    border: none;\r\n    border-bottom: 2px solid ${COLORS.mainBlue};\r\n    color: white;\r\n    flex: 1;\r\n    font-size: 1.25rem;\r\n`;\r\n\r\nconst IncrementButton = styled.button`\r\n    border-radius: 4px;\r\n    border: none;\r\n    padding: 4px 8px;\r\n    text-transform: uppercase;\r\n    letter-spacing: .7px;\r\n`;\r\n\r\nconst SubmitButton = styled(IncrementButton)`\r\n    background-color: ${COLORS.mainBlue};\r\n    color: white;\r\n`;\r\n\r\nconst CancelButton = styled(IncrementButton)`\r\n    color: ${COLORS.error};\r\n    background-color: transparent;\r\n`;\r\n\r\nconst CubeWrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, 40px);\r\n    gap: 8px;\r\n    margin-top: 16px;\r\n`;\r\n\r\nconst FlexFill = styled.div`\r\n    flex-grow: 1;\r\n`;\r\n\r\nexport default SupplyCard;","export default __webpack_public_path__ + \"static/media/chevron_right.68dead55.svg\";","export default __webpack_public_path__ + \"static/media/chevron_left.6fa6bae4.svg\";","import {useState} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport {COLORS} from '../constants';\r\n\r\nimport arrowRight from '../icons/chevron_right.svg';\r\nimport arrowLeft from '../icons/chevron_left.svg';\r\n\r\nconst ProductionStepper = ({icon, increment, production, min}) => {\r\n    const [minRange, setMinRange] = useState(0);\r\n    const [maxRange, setMaxRange] = useState(5);\r\n\r\n\r\n    const pageUp = () => {\r\n        setMinRange(minRange + 5);\r\n        setMaxRange(maxRange + 5);\r\n    }\r\n\r\n    const pageDown = () => {\r\n        setMinRange(minRange - 5);\r\n        setMaxRange(maxRange - 5);\r\n    }\r\n\r\n    let currentRange = [];\r\n    for (let i = minRange; i < maxRange; i++){\r\n        currentRange.push(i);\r\n    }\r\n\r\n    return (\r\n        <Wrapper>\r\n            <IconWrapper><Icon src={icon} alt=\"\"/></IconWrapper>\r\n            <PageButton\r\n                onClick={() => pageDown()}\r\n                disabled={minRange <= min}\r\n            >\r\n                <Icon src={arrowLeft} alt=\"\" />\r\n            </PageButton>\r\n            {currentRange.map((n, i) => \r\n                <ProductionButton\r\n                    key={i}\r\n                    active={n === production}\r\n                    onClick={() => increment(n)}\r\n                    disabled={n < min}\r\n                >\r\n                    {n}\r\n                </ProductionButton>\r\n            )}\r\n            <PageButton\r\n                onClick={() => pageUp()}\r\n            >\r\n                <Icon src={arrowRight} alt=\"\" />\r\n            </PageButton>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    border-radius: 8px;\r\n    padding: 8px;\r\n\r\n    &:nth-child(odd){\r\n        background-color: ${COLORS.cardBK};\r\n    }\r\n`;\r\n\r\nconst IconWrapper = styled.div`\r\n    line-height: 1;\r\n`;\r\n\r\nconst Icon = styled.img`\r\n    display: block;\r\n`;\r\n\r\nconst ProductionButton = styled.button`\r\n    width: 40px;\r\n    height: 40px;\r\n    border-radius: 50%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background-color: ${props => props.active ? COLORS.mainBlue : 'transparent'};\r\n    border: none;\r\n    color: white;\r\n\r\n    &:disabled{\r\n        opacity: .3;\r\n    }\r\n`;\r\n\r\nconst PageButton = styled(ProductionButton)``;\r\n\r\nexport default ProductionStepper;","export default __webpack_public_path__ + \"static/media/mc-icon.47f5d90a.svg\";","export default __webpack_public_path__ + \"static/media/steel-icon.4a99db51.svg\";","export default __webpack_public_path__ + \"static/media/titanium-icon.01fe0eb8.svg\";","export default __webpack_public_path__ + \"static/media/plants-icon.75eb78bf.svg\";","export default __webpack_public_path__ + \"static/media/energy-icon.ebfd52c8.svg\";","export default __webpack_public_path__ + \"static/media/heat-icon.6e3ea992.svg\";","export default __webpack_public_path__ + \"static/media/tile_forest.42ffb5d8.svg\";","export default __webpack_public_path__ + \"static/media/tile_temp.26e0ad57.svg\";","export default __webpack_public_path__ + \"static/media/tile_ocean.75737004.svg\";","import { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\n//import constants\r\nimport {COLORS} from './constants';\r\n\r\n//import components\r\nimport TerraformRating from './components/TerraformRating';\r\nimport SupplyCard from './components/SupplyCard';\r\nimport ProductionStepper from './components/ProductionStepper';\r\n\r\n//import icons\r\nimport mcIcon from './icons/mc-icon.svg';\r\nimport steelIcon from './icons/steel-icon.svg';\r\nimport titaniumIcon from './icons/titanium-icon.svg';\r\nimport plantsIcon from './icons/plants-icon.svg';\r\nimport energyIcon from './icons/energy-icon.svg';\r\nimport heatIcon from './icons/heat-icon.svg';\r\nimport forestTile from './icons/tile_forest.svg';\r\nimport tempTile from './icons/tile_temp.svg';\r\nimport oceanTile from './icons/tile_ocean.svg';\r\n\r\nfunction App() {\r\n\r\n    //================ TR ================\r\n    const [tr, setTR] = useState(20);\r\n\r\n    const incrementTR = (amount) => {\r\n        setTR(tr + amount);\r\n        addToLog('TR ' + (amount<0?\"\":\"+\") + amount);\r\n    }\r\n\r\n    //================ MC ================\r\n    const [mcAvailable, setMcAvailable] = useState(0);\r\n    const [mcProd, setMcProd] = useState(0);\r\n\r\n    \r\n    const incrementMC = (amount) => {\r\n        setMcAvailable(mcAvailable + amount);\r\n        addToLog('MegaCredits ' + (amount<0?\"\":\"+\") + amount);\r\n    }\r\n    \r\n    const incrementMcProd = (amount) => {\r\n        setMcProd(amount);\r\n        addToLog('MegaCredit production: ' + amount);\r\n    }\r\n\r\n    //================ STEEL ================\r\n    const [steelAvailable, setSteelAvailable] = useState(0);\r\n    const [steelProd, setSteelProd] = useState(0);\r\n\r\n    \r\n    const incrementSteel = (amount) => {\r\n        setSteelAvailable(steelAvailable + amount);\r\n        addToLog('Steel ' + (amount<0?\"\":\"+\") + amount);\r\n    }\r\n    \r\n    const incrementSteelProd = (amount) => {\r\n        setSteelProd(amount);\r\n        addToLog('Steel production: ' + amount);\r\n    }\r\n\r\n    //================ TITANIUM ================\r\n    const [titaniumAvailable, setTitaniumAvailable] = useState(0);\r\n    const [titaniumProd, setTitaniumProd] = useState(0);\r\n\r\n    \r\n    const incrementTitanium = (amount) => {\r\n        setTitaniumAvailable(titaniumAvailable + amount);\r\n        addToLog('Titanium ' + (amount<0?\"\":\"+\") + amount);\r\n    }\r\n    \r\n    const incrementTitaniumProd = (amount) => {\r\n        setTitaniumProd(amount);\r\n        addToLog('Titanium production: ' + amount);\r\n    }\r\n\r\n    //================ PLANTS ================\r\n    const [plantsAvailable, setPlantsAvailable] = useState(0);\r\n    const [plantProd, setPlantProd] = useState(0);\r\n\r\n    \r\n    const incrementPlants = (amount) => {\r\n        setPlantsAvailable(plantsAvailable + amount);\r\n        addToLog('Plants ' + (amount<0?\"\":\"+\") + amount);\r\n    }\r\n    \r\n    const incrementPlantProd = (amount) => {\r\n        setPlantProd(amount);\r\n        addToLog('Plant production: ' + amount);\r\n    }\r\n\r\n    //================ ENERGY ================\r\n    const [energyAvailable, setEnergyAvailable] = useState(0);\r\n    const [energyProd, setEnergyProd] = useState(0);\r\n\r\n    \r\n    const incrementEnergy = (amount) => {\r\n        setEnergyAvailable(energyAvailable + amount);\r\n        addToLog('Energy ' + (amount<0?\"\":\"+\") + amount);\r\n    }\r\n    \r\n    const incrementEnergyProd = (amount) => {\r\n        setEnergyProd(amount);\r\n        addToLog('Energy production: ' + amount);\r\n    }\r\n\r\n    //================ HEAT ================\r\n    const [heatAvailable, setHeatAvailable] = useState(0);\r\n    const [heatProd, setHeatProd] = useState(0);\r\n\r\n    \r\n    const incrementHeat = (amount) => {\r\n        setHeatAvailable(heatAvailable + amount);\r\n        addToLog('Heat ' + (amount<0?\"\":\"+\") + amount);\r\n    }\r\n    \r\n    const incrementHeatProd = (amount) => {\r\n        setHeatProd(amount);\r\n        addToLog('Heat production: ' + amount);\r\n    }\r\n    \r\n    //================ ACTIONS ================\r\n    const produce = () => {\r\n        //ME\r\n        setMcAvailable(mcAvailable + mcProd + tr);\r\n\r\n        //Steel\r\n        setSteelAvailable(steelAvailable + steelProd);\r\n\r\n        //Titanium\r\n        setTitaniumAvailable(titaniumAvailable + titaniumProd);\r\n\r\n        //Plants\r\n        setPlantsAvailable(plantsAvailable + plantProd);\r\n\r\n        //Heat\r\n        //heat must be produced before energy because leftover energy is added to heatAvailable\r\n        setHeatAvailable(heatAvailable + heatProd + energyAvailable);\r\n\r\n        //Energy\r\n        //leftover energy is converted to heat, do not add energyAvailable here\r\n        setEnergyAvailable(energyProd);\r\n\r\n        toggleProductionChoice();\r\n        addToLog('Production Phase');\r\n    }\r\n\r\n    //================ MISC STATE ================\r\n    const [showProductionChoice, setShowProductionChoice] = useState(false);\r\n    const [log, setLog] = useState([]);\r\n\r\n    const toggleProductionChoice = () => {\r\n        setShowProductionChoice(!showProductionChoice);\r\n    }\r\n\r\n    const addToLog = (action) => {\r\n        setLog(prevLog => [action, ...prevLog.slice(0, 24)]);\r\n    }\r\n\r\n    //=============================================\r\n    // RENDER\r\n    //=============================================\r\n\r\n    return (\r\n        <MainWrapper className=\"App\">\r\n            <MaxWidthWrapper>\r\n                <TerraformRatingWrapper>\r\n                    <TerraformRating\r\n                        tr={tr}\r\n                        increment={incrementTR}\r\n                    />\r\n                    <TileWrapper>\r\n                        <TileButton\r\n                            onClick={() => incrementTR(1)}\r\n                        >\r\n                            <img src={forestTile} alt=\"\"/>\r\n                        </TileButton>\r\n                        <TileButton\r\n                            onClick={() => incrementTR(1)}\r\n                        >\r\n                            <img src={tempTile} alt=\"\"/>\r\n                        </TileButton>\r\n                        <TileButton\r\n                            onClick={() => incrementTR(1)}\r\n                        >\r\n                            <img src={oceanTile} alt=\"\"/>\r\n                        </TileButton>\r\n                    </TileWrapper>\r\n                </TerraformRatingWrapper>\r\n                <MainGrid>\r\n                    <SupplyWrapper>\r\n                        <Heading>Supply</Heading>\r\n                        <SupplyGrid>\r\n                            <SupplyCard \r\n                                title='Mega Credits'\r\n                                supply={mcAvailable}\r\n                                icon={mcIcon}\r\n                                increment={incrementMC}\r\n                                showProduction={showProductionChoice}\r\n                                production={mcProd + tr}\r\n                            />\r\n                            <SupplyCard \r\n                                title='Steel'\r\n                                supply={steelAvailable}\r\n                                icon={steelIcon}\r\n                                increment={incrementSteel}\r\n                                showProduction={showProductionChoice}\r\n                                production={steelProd}\r\n                            />\r\n                            <SupplyCard \r\n                                title='Titanium'\r\n                                supply={titaniumAvailable}\r\n                                icon={titaniumIcon}\r\n                                increment={incrementTitanium}\r\n                                showProduction={showProductionChoice}\r\n                                production={titaniumProd}\r\n                            />\r\n                            <SupplyCard \r\n                                title='Plants'\r\n                                supply={plantsAvailable}\r\n                                icon={plantsIcon}\r\n                                increment={incrementPlants}\r\n                                showProduction={showProductionChoice}\r\n                                production={plantProd}\r\n                            />\r\n                            <SupplyCard \r\n                                title='Energy'\r\n                                supply={energyAvailable}\r\n                                icon={energyIcon}\r\n                                increment={incrementEnergy}\r\n                                showProduction={showProductionChoice}\r\n                                production={energyProd - energyAvailable}\r\n                            />\r\n                            <SupplyCard \r\n                                title='Heat'\r\n                                supply={heatAvailable}\r\n                                icon={heatIcon}\r\n                                increment={incrementHeat}\r\n                                showProduction={showProductionChoice}\r\n                                production={heatProd + energyAvailable}\r\n                            />\r\n                        </SupplyGrid>\r\n                    </SupplyWrapper>\r\n                    <RightWrapper>\r\n                        <Heading>Production</Heading>\r\n                        <SectionSpacer size='16px'/>\r\n                        <ProductionWrapper>\r\n                            <ProductionStepper\r\n                                icon={mcIcon}\r\n                                min={-5}\r\n                                production={mcProd}\r\n                                increment={incrementMcProd}\r\n                            />\r\n                            <ProductionStepper\r\n                                icon={steelIcon}\r\n                                min={0}\r\n                                production={steelProd}\r\n                                increment={incrementSteelProd}\r\n                            />\r\n                            <ProductionStepper\r\n                                icon={titaniumIcon}\r\n                                min={0}\r\n                                production={titaniumProd}\r\n                                increment={incrementTitaniumProd}\r\n                            />\r\n                            <ProductionStepper\r\n                                icon={plantsIcon}\r\n                                min={0}\r\n                                production={plantProd}\r\n                                increment={incrementPlantProd}\r\n                            />\r\n                            <ProductionStepper\r\n                                icon={energyIcon}\r\n                                min={0}\r\n                                production={energyProd}\r\n                                increment={incrementEnergyProd}\r\n                            />\r\n                            <ProductionStepper\r\n                                icon={heatIcon}\r\n                                min={0}\r\n                                production={heatProd}\r\n                                increment={incrementHeatProd}\r\n                            />\r\n                        </ProductionWrapper>\r\n                        <SectionSpacer size='32px'/>\r\n                        <Heading>Log</Heading>\r\n                        <SectionSpacer size='16px'/>\r\n                        <LogWrapper>\r\n                            {log.map((action, i) => <Action key={i}>{action}</Action>)}\r\n                        </LogWrapper>\r\n                    </RightWrapper>\r\n                </MainGrid>\r\n            </MaxWidthWrapper>\r\n            <ProduceWrapper>\r\n                {\r\n                    showProductionChoice ?\r\n                    <>\r\n                        <ProduceButton onClick={() => produce()}>Produce</ProduceButton>\r\n                        <CancelProduceButton onClick={() => toggleProductionChoice()}>Cancel</CancelProduceButton>\r\n                    </>\r\n                    :\r\n                    <ProduceButton onClick={() => toggleProductionChoice()}>Produce</ProduceButton>\r\n                }\r\n            </ProduceWrapper>\r\n        </MainWrapper>\r\n    );\r\n}\r\n\r\nconst MainWrapper = styled.main`\r\n    min-height: 100%;\r\n    padding: 32px 16px;\r\n    background-color: ${COLORS.background};\r\n    position: relative;\r\n    \r\n    @media screen and (min-width: 600px){\r\n        padding: 32px;\r\n    }\r\n`;\r\n\r\nconst MaxWidthWrapper = styled.div`\r\n    height: 100%;\r\n    max-width: 1400px;\r\n    margin: 0 auto;\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: auto 1fr;\r\n    gap: 32px;\r\n`;\r\n\r\nconst TerraformRatingWrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    gap: 32px;\r\n\r\n    @media screen and (min-width: 600px){\r\n        grid-template-columns: 1fr 1fr;\r\n    }\r\n`;\r\n\r\nconst TileWrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    @media screen and (min-width: 600px){\r\n        justify-content: flex-end;\r\n    }\r\n`;\r\n\r\nconst TileButton = styled.button`\r\n    width: 70px;\r\n    height: 70px;\r\n    background-color: transparent;\r\n    border: none;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-radius: 50%;\r\n`;\r\n\r\nconst MainGrid = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    gap: 32px;\r\n\r\n    @media screen and (min-width: 786px){\r\n        grid-template-columns: 5fr 2fr;\r\n    }\r\n`;\r\n\r\nconst RightWrapper = styled.div`\r\n    \r\n`;\r\n\r\nconst LogWrapper = styled.div`\r\n    height: 200px;\r\n    overflow-y: auto;\r\n`;\r\n\r\nconst Action = styled.p`\r\n    margin-top: 8px;\r\n    opacity: .5;\r\n\r\n    &:first-of-type{\r\n        margin-top: 0;\r\n    }\r\n`;\r\n\r\nconst SupplyWrapper = styled.div`\r\n    display: grid;\r\n    grid-template-rows: auto 1fr;\r\n    gap: 16px;\r\n`;\r\n\r\nconst SupplyGrid = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n    gap: 16px;\r\n    overflow-y: auto;\r\n`;\r\n\r\nconst Heading = styled.h2`\r\n    \r\n`;\r\n\r\nconst ProductionWrapper = styled.div`\r\n    display: grid;\r\n    gap: 8px;\r\n`;\r\n\r\nconst ProduceWrapper = styled.div`\r\n    position: fixed;\r\n    bottom: 32px;\r\n    right: 24px;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n`;\r\n\r\nconst ProduceButton = styled.button`\r\n    background-color: ${COLORS.mainBlue};\r\n    border: none;\r\n    min-height: 50px;\r\n    min-width: 150px;\r\n    border-radius: 25px;\r\n    display: inline-flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: white;\r\n    font-weight: 500;\r\n    text-transform: uppercase;\r\n    letter-spacing: .7px;\r\n    margin: 0 8px;\r\n`;\r\n\r\nconst CancelProduceButton = styled(ProduceButton)`\r\n    background-color: ${COLORS.error};\r\n    color: white;\r\n`;\r\n\r\nconst SectionSpacer = styled.div`\r\n    height: ${props => props.size};\r\n`;\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}